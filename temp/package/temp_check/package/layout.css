/*
 * Layout-System (optimiert für LightningCSS)
 * 
 * Dieses Modul bietet moderne Layout-Strukturen basierend auf CSS Grid und Flexbox,
 * optimiert für Container Queries statt traditioneller Media Queries.
 *
 * Hauptmerkmale:
 * - Container-basierte adaptive Layouts für präzisere Komponentenresponsivität
 * - Saubere Schichtentrennung durch @layer für bessere CSS-Spezifität
 * - Stabile Layout-Komponenten und atomare Utilities
 * - Logische Eigenschaften für bessere Internationalisierung
 *
 * Hinweis: Responsive Breakpoint-Utilities wurden in layout.queries.css ausgelagert
 */



@layer layout {
    /* ================= CONTAINER ================= */

    /* Container-Komponenten regeln die Breite und den Raum für Inhalte.
        Sie basieren auf den in tokens.css definierten Größen. */
    .container {
        margin-inline: auto;
        max-width: var(--container-lg);
        padding-inline: var(--space-4);
        width: 100%;
    }

    .container-sm { max-width: var(--container-sm); }

    .container-md { max-width: var(--container-md); }

    .container-lg { max-width: var(--container-lg); }

    .container-xl { max-width: var(--container-xl); }

    .container-2xl { max-width: var(--container-2xl); }

    .container-padding-sm { padding-inline: var(--space-2); }

    .container-padding-md { padding-inline: var(--space-4); }

    .container-padding-lg { padding-inline: var(--space-6); }

    /* Container-Query Definitionen, die als Anker für responsive Anpassungen dienen */
    .container-query {
        container-name: layout;
        container-type: inline-size;
    }

    .component-query {
        container-name: component;
        container-type: inline-size;
    }

    /* ================= WRAPPER / BOXEN ================= */

    /* Komponenten zur visuellen Gruppierung und Begrenzung von Inhalten */
    .container-box {
        background: var(--color-surface, white);
        border-radius: var(--radius-md);
        padding: var(--space-4);
    }

    .container-constrain {
        margin-inline: auto;
        max-width: var(--container-md);
    }

    .container-wrapper {
        max-width: 100%;
        overflow: hidden;
    }

    /* ================= LAYOUTS ================= */

    /* Zentrale Layout-Komponenten für strukturierte Anordnungen */
    .layout-grid {
        display: grid;
        gap: var(--space-4);
        grid-template-columns: 1fr;
    }

    .layout-flex {
        display: flex;
        flex-direction: column;
        gap: var(--space-4);
    }

    /* ================= SUBGRID / NESTED ================= */

    /* Komponenten für verschachtelte Grid-Layouts mit Subgrid */
    .grid-subgrid {
        display: grid;
        grid-template-columns: subgrid;
    }

    .row-subgrid {
        display: grid;
        grid-template-rows: subgrid;
    }


    @layer utilities {
    /* ================= DIMENSION-UTILITIES ================= */

    /* Atomare Klassen für Breite, Höhe und Größenkontrolle */
    .w-full { width: 100%; }

    .h-full { height: 100%; }

    .min-h-screen { min-height: 100vh; }

    .max-w-full { max-width: 100%; }

    /* ================= DISPLAY-UTILITIES ================= */

    /* Grundlegende Display-Typen */
    .grid { display: grid; }

    .flex { display: flex; }

    .inline-flex { display: inline-flex; }

    /* ================= FLEX-UTILITIES ================= */

    /* Flex-Richtung und Umbruchverhalten */
    .flex-row { flex-direction: row; }

    .flex-col { flex-direction: column; }

    .flex-wrap { flex-wrap: wrap; }

    .flex-nowrap { flex-wrap: nowrap; }

    /* Ausrichtung von Flex-Items */
    .items-start { align-items: flex-start; }

    .items-center { align-items: center; }

    .items-end { align-items: flex-end; }

    .justify-start { justify-content: flex-start; }

    .justify-center { justify-content: center; }

    .justify-end { justify-content: flex-end; }

    .justify-between { justify-content: space-between; }

    /* ================= SPACING-UTILITIES ================= */

    /* Abstände zwischen Grid- und Flex-Elementen */
    .gap-0 { gap: var(--space-0); }

    .gap-1 { gap: var(--space-1); }

    .gap-2 { gap: var(--space-2); }

    .gap-3 { gap: var(--space-3); }

    .gap-4 { gap: var(--space-4); }

    .gap-5 { gap: var(--space-5); }

    .gap-6 { gap: var(--space-6); }

    .gap-8 { gap: var(--space-8); }

    .gap-10 { gap: var(--space-10); }

    .gap-12 { gap: var(--space-12); }

    .gap-16 { gap: var(--space-16); }

    /* ================= GRID-UTILITIES ================= */

    /* Grid-Spalten und Layouts */
    .grid-cols-1 { grid-template-columns: repeat(1, 1fr); }

    .grid-cols-2 { grid-template-columns: repeat(2, 1fr); }

    .grid-cols-3 { grid-template-columns: repeat(3, 1fr); }

    .grid-cols-4 { grid-template-columns: repeat(4, 1fr); }

    .grid-cols-6 { grid-template-columns: repeat(6, 1fr); }

    .grid-cols-12 { grid-template-columns: repeat(12, 1fr); }

    .grid-auto-fit { grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); }

    .grid-auto-fill { grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); }

    /* Spaltenübergreifende Elemente */
    .col-span-1 { grid-column: span 1; }

    .col-span-2 { grid-column: span 2; }

    .col-span-3 { grid-column: span 3; }

    .col-span-4 { grid-column: span 4; }

    .col-span-6 { grid-column: span 6; }

    .col-span-12 { grid-column: span 12; }

    .col-span-full { grid-column: 1 / -1; }

    /* ================= FLEX-SIZING-UTILITIES ================= */

    /* Flex-Wachstum und Größe */
    .flex-1 { flex: 1 1 0%; }

    .flex-auto { flex: 1 1 auto; }

    .flex-none { flex: none; }

    .flex-basis-1-2 { flex-basis: 50%; }

    .flex-basis-1-3 { flex-basis: 33.3333%; }

    .flex-basis-2-3 { flex-basis: 66.6667%; }

    .flex-basis-1-4 { flex-basis: 25%; }

    .flex-basis-3-4 { flex-basis: 75%; }

    /* ================= MARGIN-UTILITIES ================= */

    /* Automatische Ränder für Zentrierung */
    .mx-auto { margin-inline: auto; }

    .my-auto { margin-block: auto; }
    }


}