import{_ as s,c as a,o as e,ag as n}from"./chunks/framework.CaP2dJjy.js";const k=JSON.parse('{"title":"UI System","description":"","frontmatter":{"title":"UI System","category":"UI"},"headers":[],"relativePath":"ui/index.md","filePath":"ui/index.md"}'),l={name:"ui/index.md"};function t(o,i,r,p,h,d){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="ui-system" tabindex="-1">UI System <a class="header-anchor" href="#ui-system" aria-label="Permalink to &quot;UI System&quot;">​</a></h1><p>The UI System of the Casoon UI Library offers a comprehensive collection of elements and components for creating modern, accessible and appealing user interfaces.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The UI System is divided into two main categories:</p><ul><li><strong>Elements</strong>: Basic UI building blocks like buttons, inputs, avatars and badges</li><li><strong>Components</strong>: More complex components consisting of multiple elements, such as cards, dialogs, forms and navigation</li></ul><h2 id="philosophy" tabindex="-1">Philosophy <a class="header-anchor" href="#philosophy" aria-label="Permalink to &quot;Philosophy&quot;">​</a></h2><p>The UI System of the Casoon UI Library is based on the following principles:</p><ol><li><strong>Modularity</strong>: Independent, reusable building blocks</li><li><strong>Consistency</strong>: Unified appearance</li><li><strong>Accessibility</strong>: Compliance with WCAG guidelines</li><li><strong>Customizability</strong>: Flexibility for individual requirements</li><li><strong>User-friendliness</strong>: Focus on intuitive operation</li></ol><h2 id="elements-vs-components" tabindex="-1">Elements vs. Components <a class="header-anchor" href="#elements-vs-components" aria-label="Permalink to &quot;Elements vs. Components&quot;">​</a></h2><h3 id="elements" tabindex="-1">Elements <a class="header-anchor" href="#elements" aria-label="Permalink to &quot;Elements&quot;">​</a></h3><p>Elements are the fundamental building blocks of the user interface. They are typically standalone and fulfill a specific function:</p><ul><li>Button</li><li>Input</li><li>Checkbox</li><li>Radio</li><li>Select</li><li>Slider</li><li>Switch</li><li>Avatar</li><li>Badge</li><li>Chip</li><li>Tooltip</li><li>etc.</li></ul><p><a href="/dragonfly-docs/ui/elements/">Go to Elements</a></p><h3 id="components" tabindex="-1">Components <a class="header-anchor" href="#components" aria-label="Permalink to &quot;Components&quot;">​</a></h3><p>Components are more complex UI structures that consist of multiple elements and offer advanced functionality:</p><ul><li>Action Bar</li><li>Alert</li><li>Back to Top</li><li>Breadcrumbs</li><li>Card</li><li>Dialog</li><li>Drawer</li><li>Form</li><li>Modal</li><li>Pagination</li><li>Table</li><li>Tabs</li><li>etc.</li></ul><p><a href="/dragonfly-docs/ui/components/">Go to Components</a></p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>The UI System can be integrated as a whole or modularly:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Entire UI System */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@casoon/ui-lib/core.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@casoon/ui-lib/ui.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Or only individual components */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@casoon/ui-lib/ui/elements/button.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@casoon/ui-lib/ui/components/card.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="customizability" tabindex="-1">Customizability <a class="header-anchor" href="#customizability" aria-label="Permalink to &quot;Customizability&quot;">​</a></h2><p>All UI elements and components can be customized via CSS variables and modifiers:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  --button-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  --button-primary-bg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--color-brand-500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,23)]))}const m=s(l,[["render",t]]);export{k as __pageData,m as default};
