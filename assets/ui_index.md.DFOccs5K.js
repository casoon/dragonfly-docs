import{_ as e,c as s,o as n,ag as a}from"./chunks/framework.CaP2dJjy.js";const u=JSON.parse('{"title":"UI System","description":"","frontmatter":{"title":"UI System","category":"UI"},"headers":[],"relativePath":"ui/index.md","filePath":"ui/index.md"}'),t={name:"ui/index.md"};function l(r,i,o,h,p,d){return n(),s("div",null,i[0]||(i[0]=[a(`<h1 id="ui-system" tabindex="-1">UI System <a class="header-anchor" href="#ui-system" aria-label="Permalink to &quot;UI System&quot;">​</a></h1><p>Das UI System der Casoon UI Library bietet eine umfassende Sammlung von Elementen und Komponenten für die Erstellung moderner, zugänglicher und ansprechender Benutzeroberflächen.</p><h2 id="ubersicht" tabindex="-1">Übersicht <a class="header-anchor" href="#ubersicht" aria-label="Permalink to &quot;Übersicht&quot;">​</a></h2><p>Das UI System ist in zwei Hauptkategorien unterteilt:</p><ul><li><strong>Elements</strong>: Grundlegende UI-Bausteine wie Buttons, Inputs, Avatars und Badges</li><li><strong>Components</strong>: Komplexere Komponenten, die aus mehreren Elementen bestehen, wie Cards, Dialogs, Forms und Navigation</li></ul><h2 id="philosophie" tabindex="-1">Philosophie <a class="header-anchor" href="#philosophie" aria-label="Permalink to &quot;Philosophie&quot;">​</a></h2><p>Das UI System der Casoon UI Library basiert auf folgenden Prinzipien:</p><ol><li><strong>Modularität</strong>: Unabhängige, wiederverwendbare Bausteine</li><li><strong>Konsistenz</strong>: Einheitliches Erscheinungsbild</li><li><strong>Zugänglichkeit</strong>: Einhaltung von WCAG-Richtlinien</li><li><strong>Anpassbarkeit</strong>: Flexibilität für individuelle Anforderungen</li><li><strong>Benutzerfreundlichkeit</strong>: Fokus auf intuitive Bedienung</li></ol><h2 id="elements-vs-components" tabindex="-1">Elements vs. Components <a class="header-anchor" href="#elements-vs-components" aria-label="Permalink to &quot;Elements vs. Components&quot;">​</a></h2><h3 id="elements" tabindex="-1">Elements <a class="header-anchor" href="#elements" aria-label="Permalink to &quot;Elements&quot;">​</a></h3><p>Elemente sind die grundlegenden Bausteine der Benutzeroberfläche. Sie sind in der Regel eigenständig und erfüllen eine spezifische Funktion:</p><ul><li>Button</li><li>Input</li><li>Checkbox</li><li>Radio</li><li>Select</li><li>Slider</li><li>Switch</li><li>Avatar</li><li>Badge</li><li>Chip</li><li>Tooltip</li><li>etc.</li></ul><p><a href="/dragonfly-docs/ui/elements/">Zu den Elements</a></p><h3 id="components" tabindex="-1">Components <a class="header-anchor" href="#components" aria-label="Permalink to &quot;Components&quot;">​</a></h3><p>Komponenten sind komplexere UI-Strukturen, die aus mehreren Elementen bestehen und fortgeschrittenere Funktionalität bieten:</p><ul><li>Action Bar</li><li>Alert</li><li>Back to Top</li><li>Breadcrumbs</li><li>Card</li><li>Dialog</li><li>Drawer</li><li>Form</li><li>Modal</li><li>Pagination</li><li>Table</li><li>Tabs</li><li>etc.</li></ul><p><a href="/dragonfly-docs/ui/components/">Zu den Components</a></p><h2 id="verwendung" tabindex="-1">Verwendung <a class="header-anchor" href="#verwendung" aria-label="Permalink to &quot;Verwendung&quot;">​</a></h2><p>Das UI System kann als Ganzes oder modular eingebunden werden:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Gesamtes UI-System */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@casoon/ui-lib/core.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@casoon/ui-lib/ui.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Oder nur einzelne Komponenten */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@casoon/ui-lib/ui/elements/button.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@casoon/ui-lib/ui/components/card.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="anpassbarkeit" tabindex="-1">Anpassbarkeit <a class="header-anchor" href="#anpassbarkeit" aria-label="Permalink to &quot;Anpassbarkeit&quot;">​</a></h2><p>Alle UI-Elemente und -Komponenten können über CSS-Variablen und Modifikatoren angepasst werden:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  --button-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  --button-primary-bg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--color-brand-500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,23)]))}const c=e(t,[["render",l]]);export{u as __pageData,c as default};
