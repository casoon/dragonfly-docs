import{_ as n,c as i,o as s,a2 as t}from"./chunks/framework.Ca0TN77I.js";const g=JSON.parse('{"title":"Container-System","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container-system.md","filePath":"guide/container-system.md"}'),a={name:"guide/container-system.md"};function r(o,e,l,c,h,d){return s(),i("div",null,e[0]||(e[0]=[t(`<h1 id="container-system" tabindex="-1">Container-System <a class="header-anchor" href="#container-system" aria-label="Permalink to &quot;Container-System&quot;">​</a></h1><p>Das Container-System der Casoon UI Library bietet eine konsistente Methode zur Verwaltung von Inhaltsbreiten und -abständen in Ihrer Anwendung.</p><h2 id="module-importieren" tabindex="-1">Module importieren <a class="header-anchor" href="#module-importieren" aria-label="Permalink to &quot;Module importieren&quot;">​</a></h2><p><strong>Wichtig:</strong> Das Container-System ist im <code>layout.css</code> Layer enthalten, welches <code>core.css</code> als Abhängigkeit hat. Stellen Sie sicher, dass diese in der richtigen Reihenfolge importiert werden:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Notwendige Abhängigkeit */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@casoon/ui-lib/core.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Layout-System, enthält Container */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@casoon/ui-lib/layout.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ul><li><strong>Container für konsistente Breiten verwenden</strong>: Nutzen Sie Container, um eine einheitliche Inhaltsbreite auf Ihrer gesamten Website zu gewährleisten.</li><li><strong>Container-Varianten gezielt einsetzen</strong>: Wählen Sie zwischen <code>.container</code>, <code>.container-fluid</code> und <code>.container-{breakpoint}</code> je nach Anforderung des Layouts.</li><li><strong>Verschachtelte Container vermeiden</strong>: Verschachteln Sie Container nur, wenn unbedingt nötig, um unerwartete Layout-Probleme zu vermeiden.</li><li><strong>Container mit Grid kombinieren</strong>: Container eignen sich hervorragend als Wrapper für Grid-Layouts, um konsistente Seitenränder zu gewährleisten.</li><li><strong>Container-Abmessungen anpassen</strong>: Passen Sie bei Bedarf die Container-Variablen an, um den Designanforderungen Ihres Projekts gerecht zu werden.</li><li><strong>Container für Abschnitte verwenden</strong>: Nutzen Sie Container, um verschiedene Seitenabschnitte visuell zu trennen und zu organisieren.</li><li><strong>Responsive Überlegungen beachten</strong>: Beachten Sie, wie sich Container auf verschiedenen Bildschirmgrößen verhalten, insbesondere bei Übergängen zwischen Breakpoints.</li></ul>`,7)]))}const u=n(a,[["render",r]]);export{g as __pageData,u as default};
