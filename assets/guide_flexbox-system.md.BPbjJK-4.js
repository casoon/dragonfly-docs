import{_ as n,c as i,o as s,ag as t}from"./chunks/framework.B6PdRehI.js";const g=JSON.parse('{"title":"Flexbox-System","description":"","frontmatter":{},"headers":[],"relativePath":"guide/flexbox-system.md","filePath":"guide/flexbox-system.md"}'),r={name:"guide/flexbox-system.md"};function a(o,e,l,d,p,h){return s(),i("div",null,e[0]||(e[0]=[t(`<h1 id="flexbox-system" tabindex="-1">Flexbox-System <a class="header-anchor" href="#flexbox-system" aria-label="Permalink to &quot;Flexbox-System&quot;">​</a></h1><p>Das Flexbox-System der Casoon UI Library ermöglicht flexible und responsive Layouts für eindimensionale Anordnungen von Elementen.</p><h2 id="module-importieren" tabindex="-1">Module importieren <a class="header-anchor" href="#module-importieren" aria-label="Permalink to &quot;Module importieren&quot;">​</a></h2><p><strong>Wichtig:</strong> Das Flexbox-System ist im <code>layout.css</code> Layer enthalten, welches <code>core.css</code> als Abhängigkeit hat. Stellen Sie sicher, dass diese in der richtigen Reihenfolge importiert werden:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Notwendige Abhängigkeit */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@casoon/ui-lib/core.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Layout-System, enthält Flexbox */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@casoon/ui-lib/layout.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ul><li><p><strong>Definierte Höhe für Flex-Container:</strong> Geben Sie Ihren Flex-Containern eine definierte Höhe, wenn Sie vertikale Ausrichtung verwenden möchten.</p></li><li><p><strong>Flex-Grow für ungleichmäßige Verteilung:</strong> Nutzen Sie <code>flex-grow</code> unterschiedlich für Elemente, die proportional mehr Platz einnehmen sollen.</p></li><li><p><strong>Flex-Wrap für responsive Designs:</strong> Verwenden Sie <code>flex-wrap: wrap</code> für Container, deren Elemente bei kleinen Bildschirmen umbrechen sollen.</p></li><li><p><strong>Reihenfolge strategisch einsetzen:</strong> Nutzen Sie die <code>order</code>-Eigenschaft, um die visuelle Reihenfolge von Elementen zu ändern, ohne die DOM-Struktur zu verändern.</p></li><li><p><strong>Verschachtelte Flex-Container begrenzen:</strong> Zu viele verschachtelte Flex-Container können die Performance beeinträchtigen und die Komplexität erhöhen.</p></li><li><p><strong>Flexbox mit Grid kombinieren:</strong> Verwenden Sie Flexbox für eindimensionale Layouts und Grid für zweidimensionale Layouts.</p></li><li><p><strong>Gaps statt Margins verwenden:</strong> Nutzen Sie die <code>gap</code>-Eigenschaft für konsistente Abstände zwischen Flex-Elementen.</p></li><li><p><strong>Komponenten-Layout optimieren:</strong> Flexbox eignet sich besonders gut für das Layout einzelner Komponenten oder UI-Elemente.</p></li></ul>`,7)]))}const m=n(r,[["render",a]]);export{g as __pageData,m as default};
